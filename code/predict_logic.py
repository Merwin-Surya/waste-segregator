# -*- coding: utf-8 -*-
"""TL_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NoS1J7VGNOS9cXUH5roWokxQXnpET3QE
"""

import os

import cv2
import keras
import matplotlib.pyplot as plt
from PIL import ImageFile
from google.colab import auth
from keras.applications import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.layers import Dense, GlobalAveragePooling2D
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from oauth2client.client import GoogleCredentials
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

fid = drive.ListFile({'q': "title='FYP_FINAL_DATASET2.zip'"}).GetList()[0]['id']
f = drive.CreateFile({'id': fid})
f.GetContentFile('FYP_FINAL_DATASET2.zip')

# !unzip FYP_FINAL_DATASET2.zip

TF_model = InceptionV3(weights='imagenet',
                       include_top=False)  # imports the InceptionV3 model and discards the last 1000 neuron layer.

x = TF_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)  # we add dense layers so that the model can learn more complex functions and
# classify for better results.
x = Dense(1024, activation='relu')(x)  # dense layer 2
x = Dense(512, activation='relu')(x)  # dense layer 3
prediction = Dense(12, activation='softmax')(x)  # final layer with softmax activation

model = Model(inputs=TF_model.input, outputs=prediction)

for i, layer in enumerate(model.layers):
    print(i, layer.name)

for layer in model.layers[:20]:
    layer.trainable = False
for layer in model.layers[20:]:
    layer.trainable = True

train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)  # included in our dependencies

train_generator = train_datagen.flow_from_directory('/content/FYP_FINAL_DATASET',
                                                    target_size=(299, 299),
                                                    color_mode='rgb',
                                                    batch_size=32,
                                                    class_mode='categorical',
                                                    shuffle=True)

model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

ImageFile.LOAD_TRUNCATED_IMAGES = True
step_size_train = train_generator.n // train_generator.batch_size
history = model.fit_generator(generator=train_generator,
                              steps_per_epoch=step_size_train,
                              epochs=10)

loss_train = history.history['loss']
epochs = range(1, 11)
plt.plot(epochs, loss_train, 'g', label='Training loss')
plt.title('Training loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

model.save("FYP_TF_INCEPTIONV3_FINAL.h5")

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

CATEGORIES = ["BATTERY", "BULBS", "CARDBOARD", "CIGARETTES", "DIAPERS", "MEDICINE_BOTTLES", "PAPER", "PAPER_CUPS",
              "PESTICIDE_BOTTLES", "PLASTIC_BAGS", "PLASTIC_BOTTLES", "PLASTIC_WRAPPERS"]

IMG_SIZE = 299
img_array1 = cv2.imread('/content/Non_Plastic.jpg')
img_array1 = img_array1 / 255.0
new_array1 = cv2.resize(img_array1, (IMG_SIZE, IMG_SIZE))
b, g, r = cv2.split(new_array1)
new_array1 = cv2.merge([r, g, b])
X = new_array1.reshape([-1, IMG_SIZE, IMG_SIZE, 3])

model1 = keras.models.load_model("/content/FYP_TF_INCEPTIONV3_FINAL.h5")

prediction = model1.predict(X)
Plastic = prediction[0, 5] + prediction[0, 8] + prediction[0, 9] + prediction[0, 10] + prediction[0, 11]
Non_Plastic = prediction[0, 0] + prediction[0, 1] + prediction[0, 2] + prediction[0, 3] + prediction[0, 4] + prediction[
    0, 6] + prediction[0, 7]
print(prediction)
if Plastic > Non_Plastic:
    print(Plastic)
    print("Plastic")
else:
    print(Non_Plastic)
    print("Non_Plastic")

print(prediction)
